import { useQuiz } from '../context/QuizContext'
import './ProgressTracker.css'
import { Document, Page, Text, View, StyleSheet, PDFDownloadLink, Image } from '@react-pdf/renderer'
import logo from '../assets/logo.png'

// Create styles for PDF
const styles = StyleSheet.create({
  page: {
    padding: 30,
  },
  title: {
    fontSize: 24,
    textAlign: 'center',
    marginBottom: 20,
  },
  subtitle: {
    fontSize: 14,
    textAlign: 'center',
    marginBottom: 30,
    color: '#666',
  },
  stats: {
    marginBottom: 20,
  },
  statText: {
    fontSize: 12,
    marginBottom: 5,
  },
  achievement: {
    fontSize: 12,
    marginVertical: 20,
    textAlign: 'center',
    padding: 10,
  },
  table: {
    marginTop: 20,
  },
  tableRow: {
    flexDirection: 'row',
    borderBottomWidth: 1,
    borderBottomColor: '#ddd',
    paddingVertical: 5,
  },
  tableHeader: {
    backgroundColor: '#ff9b00',
    color: 'white',
  },
  tableCell: {
    flex: 1,
    padding: 5,
    fontSize: 10,
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 0,
    right: 0,
    textAlign: 'center',
    fontSize: 10,
    color: '#666',
  },
  logo: {
    width: 160,
    height: 70,
    marginBottom: 20,
    alignSelf: 'center',
  },
})

// Certificate PDF Component
const CertificatePDF = ({ stats, quizResults, generateCertificateText }) => (
  <Document>
    <Page size="A4" style={styles.page}>
      <Image src={logo} style={styles.logo} />
      <Text style={styles.title}>Certificate of Achievement</Text>
      <Text style={styles.subtitle}>{new Date().toLocaleDateString()}</Text>

      <View style={styles.stats}>
        <Text style={styles.statText}>Total Quizzes Completed: {stats.totalQuizzes}</Text>
        <Text style={styles.statText}>Average Score: {stats.averageScore.toFixed(1)}%</Text>
        <Text style={styles.statText}>Average Time per Quiz: {Math.round(stats.averageTime)}s</Text>
      </View>

      <Text style={styles.achievement}>
        {generateCertificateText(stats.averageScore)}
      </Text>

      <View style={styles.table}>
        <View style={[styles.tableRow, styles.tableHeader]}>
          <Text style={styles.tableCell}>Date</Text>
          <Text style={styles.tableCell}>Topic</Text>
          <Text style={styles.tableCell}>Score</Text>
          <Text style={styles.tableCell}>Time</Text>
        </View>
        {quizResults.map((result, index) => (
          <View key={index} style={styles.tableRow}>
            <Text style={styles.tableCell}>{new Date(result.date).toLocaleDateString()}</Text>
            <Text style={styles.tableCell}>{result.topic}</Text>
            <Text style={styles.tableCell}>
              {((result.score / result.totalQuestions) * 100).toFixed(1)}%
            </Text>
            <Text style={styles.tableCell}>{result.timeSpent}s</Text>
          </View>
        ))}
      </View>

      <Text style={styles.footer}>Generated by AI Study Buddy</Text>
    </Page>
  </Document>
)

const ProgressTracker = () => {
  const { quizResults } = useQuiz()

  const calculateStats = () => {
    if (quizResults.length === 0) return null

    const totalQuizzes = quizResults.length
    const averageScore = quizResults.reduce((acc, result) => 
      acc + (result.score / result.totalQuestions) * 100, 0) / totalQuizzes
    const averageTime = quizResults.reduce((acc, result) => 
      acc + result.timeSpent, 0) / totalQuizzes

    const topicStats = quizResults.reduce((acc, result) => {
      if (!acc[result.topic]) {
        acc[result.topic] = {
          attempts: 0,
          totalScore: 0,
          totalQuestions: 0
        }
      }
      acc[result.topic].attempts += 1
      acc[result.topic].totalScore += result.score
      acc[result.topic].totalQuestions += result.totalQuestions
      return acc
    }, {} as Record<string, { attempts: number; totalScore: number; totalQuestions: number }>)

    return {
      totalQuizzes,
      averageScore,
      averageTime,
      topicStats
    }
  }

  const generateCertificateText = (averageScore: number) => {
    if (averageScore >= 90) {
      return "Outstanding Achievement! You've demonstrated exceptional understanding and mastery of the material."
    } else if (averageScore >= 80) {
      return "Excellent Work! You've shown great comprehension and dedication to learning."
    } else if (averageScore >= 70) {
      return "Great Job! You've displayed solid understanding of the concepts."
    } else {
      return "Keep Learning! Your dedication to improvement is commendable."
    }
  }

  const stats = calculateStats()

  if (!stats) {
    return (
      <div className="progress-container">
        <h2>Progress Tracker</h2>
        <div className="action-buttons">
          <button type="button" className="action-btn" disabled>
            Download Progress
          </button>
        </div>
        <p>No quiz results available yet. Complete some quizzes to see your progress!</p>
      </div>
    )
  }

  return (
    <div className="progress-container">
      <h2>Progress Tracker</h2>
      
      <div className="action-buttons">
        <PDFDownloadLink
          document={<CertificatePDF stats={stats} quizResults={quizResults} generateCertificateText={generateCertificateText} />}
          fileName="quiz_achievement_certificate.pdf"
          className="action-btn"
        >
          {({ loading }) => (loading ? 'Preparing Download...' : 'Download Progress')}
        </PDFDownloadLink>
      </div>

      <div className="stats-grid">
        <div className="stat-card">
          <h3>Total Quizzes</h3>
          <p className="stat-value">{stats.totalQuizzes}</p>
        </div>
        <div className="stat-card">
          <h3>Average Score</h3>
          <p className="stat-value">{stats.averageScore.toFixed(1)}%</p>
        </div>
        <div className="stat-card">
          <h3>Average Time</h3>
          <p className="stat-value">{Math.round(stats.averageTime)}s</p>
        </div>
      </div>

      <div className="topic-progress">
        <h3>Topic Progress</h3>
        {Object.entries(stats.topicStats).map(([topic, data]) => (
          <div key={topic} className="topic-card">
            <h4>{topic}</h4>
            <div className="topic-stats">
              <p>Attempts: {data.attempts}</p>
              <p>Average Score: {((data.totalScore / data.totalQuestions) * 100).toFixed(1)}%</p>
            </div>
            <div className="progress-bar">
              <div 
                className="progress-fill"
                style={{ width: `${(data.totalScore / data.totalQuestions) * 100}%` }}
              />
            </div>
          </div>
        ))}
      </div>

      <div className="recent-quizzes">
        <h3>Recent Quizzes</h3>
        <div className="quiz-history">
          {quizResults.slice().reverse().map((result, index) => (
            <div key={index} className="quiz-result-card">
              <div className="quiz-result-header">
                <h4>{result.topic}</h4>
                <span className="quiz-date">
                  {new Date(result.date).toLocaleDateString()}
                </span>
              </div>
              <div className="quiz-result-stats">
                <p>Score: {result.score}/{result.totalQuestions}</p>
                <p>Time: {result.timeSpent}s</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}

export default ProgressTracker 